<launch>
  <include
    file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="paused" value="true" />
  </include>

  <param name= "robot_description" command="$(find xacro)/xacro --inorder $(find ck_robot)/urdf/ck_robot.urdf.xacro"/>
    <param name = "my_robot" value="ck_robot"/> 
	<arg name ="init_pose" value="-x -0.20 -y 0.55 -z -0.05 -R 0 -P 0 -Y 0"/>

    <!-- This command adds the controller variables you defined in the config file into ros's parameter list. Simply add the file name in the file tag -->
	<rosparam file="$(find ck_robot)/config/config_controllers.yaml" command="load"/>

  <node
    name="tf_footprint_base"
    pkg="tf"
    type="static_transform_publisher"
    args="0 0 0 0 0 0 base_link base_footprint 40" />
  <node
    name="spawn_model"
    pkg="gazebo_ros"
    type="spawn_model"
    args="$(arg init_pose) -param robot_description -urdf -model ck_robot -J joint_2 0.75 -unpause"
    output="screen" />
  <node
    name="fake_joint_calibration"
    pkg="rostopic"
    type="rostopic"
    args="pub /calibrated std_msgs/Bool true" />

  <!-- Controller spawner: Starts all the defined controllers with their configs. Just add your controller names defined in your config file into the args tag below   -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" ns="/ck_robot" args="joint_state_controller trans_1 trans_2 trans_3 trans_4 trans_5 trans_6" />

<!-- Node for publishing base footprint -->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="False"/>
    </node>

  <!-- TF node that gives the static transformation between the world map and the base link of your robot. Change /base_link to the /root link name of your robot -->
    <node pkg="tf" type="static_transform_publisher" name="map_to_base" args="1 0 0 0 0 0 1 /map /base_link 10" />

  <!-- A node to publish the robot states onto ros network -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>	
</launch>
